# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-cfkgDD4IbalJRy87yVoyg9S_xQyUbg8
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from math import radians, cos, sin, asin, sqrt
def distance(lat1, lat2, lon1, lon2): 
      
    # The math module contains a function named 
    # radians which converts from degrees to radians. 
    lon1 = radians(lon1) 
    lon2 = radians(lon2) 
    lat1 = radians(lat1) 
    lat2 = radians(lat2) 
       
    # Haversine formula  
    dlon = lon2 - lon1  
    dlat = lat2 - lat1 
    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
  
    c = 2 * asin(sqrt(a))  
     
    # Radius of earth in kilometers. Use 3956 for miles 
    r = 6371
       
    # calculate the result 
    return(c * r) 
    
print(distance(lat1, lat2, lon1, lon2), "K.M")



preedata.head()
prebdata.head()
prephdata.head()
prepdata.head()
prevdata.head()







hdata = pd.read_csv('Database  - Hospitals.csv')
edata = pd.read_csv('Database  - Electricity.csv')
pdata = pd.read_csv('Database  - Pharmacy.csv')
phdata = pd.read_csv('Database  - PHC.csv')
vdata = pd.read_csv('Database  - Villages POP.csv')
bdata = pd.read_csv('Database  - Blood Bank.csv')



prevdata.columns=['Tehsil', 'lat', 'long','population']
prepdata.columns=['pname','lat','long']
prebdata.columns=['hname','long','lat']
preedata.columns=['Area', 'lat', 'long', 'No. of Units','capacity']
prephdata.columns=['hname', 'long', 'lat']

"""prehdata-(45,3)



prepdata - all values(18,3)





preedata - all values(17,5)

prephdata= All values(17,3)

prebdata= All value(9,3)

prevdata(129,4)
"""

phx,phy=prephdata['long'],prephdata['lat']
bx,by=prebdata['long'],prebdata['lat']
px,py=prepdata['long'],prepdata['lat']
ehx,ehy=preedata['long'][preedata.units>8],preedata['lat'][preedata.units>8]
vx,vy=prevdata['long'],prevdata['lat']

bbox = ((prephdata.long.min(),   prephdata.long.max()),      
         prephdata.lat.min(), prephdata.lat.max())



preedata[preedata.Capa]

preedata.columns=['Area', 'lat', 'long', 'units', 'capacity']



preedata[preedata.No. of Units]

preedata.describe()

prevdata.describe()

import sklearn.cluster
X=prevdata[['lat','long','population']]

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X)
Xsc =scaler.transform(X)

kclf = KMeans(n_clusters=12)
kclf.fit(Xsc)
centroid =kclf.cluster_centers_
centroid

ans=scaler.inverse_transform(centroid)
ans

cox=[]
coy=[]
for i in  range(len(ans)):
  cox.append(ans[i][1])
  coy.append(ans[i][0])

ll=[]
for i in  range(len(ans)):
  l=[]
  for j in range(len(ans)):
    d =distance(kclf.cluster_centers_[i][0], kclf.cluster_centers_[j][0], kclf.cluster_centers_[i][1], kclf.cluster_centers_[j][1])
    if(d!=0):
      l.append(d)
      md =min(l)
  ll.append(md)
print(ll)

BBox = (min(cox),max(cox),min(coy), max(coy))

# fig, plt = plt.subplots()
plt.figure(figsize=(24, 16), dpi=80)
plt.scatter(phx, phy, s=10, c='r', marker="o",linewidth=10)
plt.scatter(bx, by, s=10, c='b', marker="3",linewidth=2)
plt.scatter(px, py, s=10, c='g', marker="8",linewidth=2)
plt.scatter(ehx, ehy, s=10, c='y', marker="^",linewidth=10)
plt.scatter(vx, vy, s=10, c='k', marker="3",linewidth=2)
plt.scatter(cox, coy, s=10, c='m', marker="8",linewidth=10)
for x,y in zip(phx,phy):
  label="{:.2f}".format(y)
  plt.annotate(label, (x,y),textcoords="offset points",xytext=(0,4))
n = [1,2,3,4,5,6,7,8,9,10,11,12]
for x,y in zip(cox,coy):
  label="{:.2f}".format(y)
  plt.annotate(label, (x,y),textcoords="offset points",xytext=(0,4))
# plt.title('Scatter plot pythonspot.com')
plt.xlabel("longitude")
# # plt.xlim(91.8,93)
plt.ylabel('latitude')
# plt.xlim(BBox[0],BBox[1])
# plt.ylim(BBox[2],BBox[3])
# plt.show()
plt.savefig('result.png')

import gmplot 
  
# Plot method Draw a line in 
# between given coordinates 
gmap3 = gmplot.GoogleMapPlotter(12,92.5, 13) 
  
gmap3.plot(py, px,'cornflowerblue', edge_width = 2.5) 
  
gmap3.draw("'/content/drive/My Drive/map.html")

y = [2.56422, 3.77284, 3.52623, 3.51468, 3.02199]
z = [0.15, 0.3, 0.45, 0.6, 0.75]
n = [58, 651, 393, 203, 123]

fig, ax = plt.subplots()
ax.scatter(z, y)

for i, txt in enumerate(n):
    ax.annotate(txt, (z[i], y[i]))

ruh_m = plt.imread('map (2).png')

# ruh_m.view()











